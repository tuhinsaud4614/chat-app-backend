{
  "apiVersion": "1.0.0",
  "swagger": "2.0",
  "title": "Chat App",
  "info": {
    "title": "Chat App REST API",
    "description": "This is a Chat App <b>Backend</b> server"
  },
  "schemes": ["http", "https"],
  "tags": [
    {
      "name": "User",
      "description": "Users can control their accounts."
    },
    {
      "name": "Authentication",
      "description": "All routes of the authentication."
    },
    {
      "name": "Friendship",
      "description": "All routes of the friendship."
    },
    {
      "name": "Conversation",
      "description": "All routes of the conversation."
    }
  ],
  "paths": {
    "/api/v1/user/create": {
      "post": {
        "tags": ["User"],
        "summary": "Create the new user.",
        "description": "This route will register an account and return user id when its created successfully.",
        "consumes": "application/json",
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "User data to register an account",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "confirmPassword": {
                  "type": "string"
                }
              },
              "required": ["email", "password", "confirmPassword"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "allOf": [
                { "$ref": "#/definitions/Success" },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "string" }
                      }
                    }
                  }
                }
              ]
            }
          },
          "409": {
            "description": "Conflict with requirement",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/verify/{id}/{verificationCode}": {
      "get": {
        "tags": ["User"],
        "summary": "Verify the new user.",
        "description": "This will verify the new user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The user id of a new user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "verificationCode",
            "description": "The verification code of new user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "schema": {
              "allOf": [
                { "$ref": "#/definitions/Success" },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict with requirement",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/resend-verification-code/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Resend the verification code.",
        "description": "This will resend the verification code.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The user id of newly created user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "schema": {
              "allOf": [
                { "$ref": "#/definitions/Success" },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict with requirement",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/forget-password": {
      "post": {
        "tags": ["User"],
        "summary": "Forgot password.",
        "description": "This will send a code to reset password through email.",
        "consumes": "application/json",
        "parameters": [
          {
            "in": "body",
            "name": "Request Body",
            "description": "The user email who already verified",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                }
              },
              "required": ["token"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                { "$ref": "#/definitions/Success" },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              ]
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/verify-reset-password/{id}/{verificationCode}": {
      "get": {
        "tags": ["User"],
        "summary": "Verify the code to reset password.",
        "description": "This will verify the code send through email to reset password.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The user id of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "verificationCode",
            "description": "The reset password verification code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "schema": {
              "allOf": [
                { "$ref": "#/definitions/Success" },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict with requirement",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/reset-password/{id}/{verifiedCode}": {
      "post": {
        "tags": ["User"],
        "summary": "Set the new password.",
        "description": "This will set a new password for the existed user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The user id of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "verifiedCode",
            "description": "The verified code to set new password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "New password",
            "description": "New password for the user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newPassword": {
                  "type": "string"
                },
                "confirmPassword": {
                  "type": "string"
                }
              },
              "required": ["newPassword", "confirmPassword"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "schema": {
              "allOf": [
                { "$ref": "#/definitions/Success" },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict with requirement",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/profile": {
      "patch": {
        "tags": ["User"],
        "summary": "Upload Profile Picture.",
        "description": "This route will upload the user profile picture.",
        "security": [{ "Bearer": [] }],
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "in": "formData",
            "name": "avatar",
            "description": "The profile picture of the user",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "image": {
                          "$ref": "#/definitions/ExtendedImage"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login the user.",
        "description": "User can login through this route.",
        "consumes": "application/json",
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "User data to login an account",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": ["email", "password"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        { "$ref": "#/definitions/User" },
                        { "$ref": "#/definitions/Tokens" }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/auth/token": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh token.",
        "description": "This route will return the refresh token.",
        "consumes": "application/json",
        "parameters": [
          {
            "in": "body",
            "name": "Refresh Token",
            "description": "User data to register an account",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              },
              "required": ["token"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/Tokens"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "delete": {
        "tags": ["Authentication"],
        "summary": "Logout user.",
        "description": "This route will logout the user.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },

          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/friendship/send-request/{receiverId}": {
      "post": {
        "tags": ["Friendship"],
        "summary": "Send friend request",
        "description": "This route will send friend request to other user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "receiverId",
            "description": "The user id of the receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "friendshipId": { "type": "string" },
                        "isAccept": { "type": "boolean", "default": false }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },

          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },

          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/friendship/accept-request/{friendshipId}": {
      "patch": {
        "tags": ["Friendship"],
        "summary": "Accept friend request",
        "description": "This route will accept friend request to other user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "friendshipId",
            "description": "The id of the friendship",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "friendshipId": { "type": "string" },
                        "isAccept": { "type": "boolean", "default": true }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },

          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },

          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/friendship/cancel-request/{friendshipId}": {
      "delete": {
        "tags": ["Friendship"],
        "summary": "Cancel friend request",
        "description": "This route will cancel friend request to other user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "friendshipId",
            "description": "The id of the friendship",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "default": null
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },

          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },

          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/conversation": {
      "get": {
        "tags": ["Conversation"],
        "summary": "All the conversations",
        "description": "This route will return all the conversations.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Conversation"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/conversation/{conversationId}": {
      "get": {
        "tags": ["Conversation"],
        "summary": "Get all messages for single conversation",
        "description": "This route will return all messages of single conversation.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/Message"
                          }
                        },
                        "totalMessages": { "type": "number", "default": 0 },
                        "hasNext": { "type": "boolean", "default": false },
                        "nextPage": { "type": "number", "default": 0 },
                        "previousPage": { "type": "number", "default": 0 },
                        "totalPages": { "type": "number", "default": 0 }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/conversation/{conversationId}/message": {
      "post": {
        "tags": ["Conversation"],
        "summary": "Send a message",
        "description": "This route will send a message.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Success"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/Message"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid inputs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Tokens": {
      "type": "object",
      "properties": {
        "accessToken": { "type": "string" },
        "refreshToken": { "type": "string" }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "firstName": { "type": "string", "default": null },
        "lastName": { "type": "string", "default": null },
        "email": { "type": "string" },
        "avatar": {
          "allOf": [
            {
              "$ref": "#/definitions/ExtendedImage"
            }
          ],
          "nullable": true
        },
        "role": { "type": "string" }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "originalName": { "type": "string" },
        "webpName": { "type": "string" },
        "originalUrl": { "type": "string" },
        "webpUrl": { "type": "string" },
        "width": { "type": "number" },
        "height": { "type": "number" }
      }
    },
    "ExtendedImage": {
      "type": "object",
      "properties": {
        "main": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "640": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "750": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "828": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "1080": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "1200": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "1920": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "2048": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        "3840": {
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        }
      }
    },
    "Conversation": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "participants": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/User"
              }
            ]
          }
        },
        "name": { "type": "string", "default": null },
        "isGroup": { "type": "boolean", "default": false },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "conversation": { "type": "string" },
        "sender": {
          "$ref": "#/definitions/User"
        },
        "text": { "type": "string", "nullable": true },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedImage"
          }
        },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "detail": { "type": "string", "default": null },
        "message": { "type": "string" },
        "error": { "type": "string" },
        "success": { "type": "boolean", "default": false },
        "timeStamp": { "type": "string", "format": "date-time" }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "detail": {
          "type": "string",
          "default": null
        },
        "message": { "type": "string" },
        "success": { "type": "boolean", "default": true },
        "timeStamp": { "type": "string", "format": "date-time" }
      }
    }
  }
}
